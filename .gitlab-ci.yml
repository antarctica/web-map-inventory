---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/MAGIC/web-map-inventory/-/settings/ci_cd

# = Secret variables
#   Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Where a variable should be protected (only accessible to the master branch, tags, its name is appended with
#     '(protected)' (e.g. FOO (protected)`
#   Where a variable is a file, it's name is appended with '(file)' and the value refers to the file that should be
#     used as it's contents (e.g. FOO (file): "[contents of ./bar]"
#   Sensitive values are represented by "[Sensitive]"
#
# - App
# > DOT_ENV (protected, file): "[contents of .env]"
# > DOT_FLASKENV (protected, file): "[contents of .flaskenv]"
#
# - PyPi (production)
# > PYPI_PASSWORD: "[Sensitive]"
#
# - PyPi (staging)
# > PYPI_TEST_PASSWORD: "[Sensitive]"
#
# - Sentry
# > SENTRY_AUTH_TOKEN: "[Sensetive]"
# > SENTRY_DSN: "[Sensetive]"


# == Global settings ==

stages:
  - üí• setup
  - üß™ test
  - üì¶ package
  - üöö publish
  - üê≥ build
  - üöÄ release

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: /certs/client
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_VERIFY: 1
  GITLAB_REGISTRY: docker-registry.data.bas.ac.uk
  APP_NAME: magic-map-layers-airflow
  PYPI_USERNAME: british-antarctic-survey
  PYPI_TEST_USERNAME: british-antarctic-survey
  SENTRY_ORG: antarctica
  SENTRY_PROJECT: web-map-inventory

image:
  name: docker-registry.data.bas.ac.uk/magic/web-map-inventory:latest
  entrypoint: [""]

# == Jobs ==

setup-app:
  stage: üí• setup
  script:
    - "python support/python-packaging/parse_version.py $(git describe --tags) > APP_RELEASE.txt"
  artifacts:
    name: "$CI_BUILD_TOKEN-release"
    paths:
      - APP_RELEASE.txt
    expire_in: 1 month

test-app:
  stage: üß™ test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest -o junit_family=xunit2 --junitxml=test-results.xml --random-order"
  artifacts:
    reports:
      junit: test-results.xml

coverage-app:
  stage: üß™ test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest --cov=bas_web_map_inventory --cov-fail-under=100 ."
    - "coverage html"
  artifacts:
    name: "$CI_BUILD_TOKEN-coverage"
    paths:
      - htmlcov
    expire_in: 1 month

pep8-app:
  stage: üß™ test
  script:
    - "flake8 ."

bandit-app:
  stage: üß™ test
  script:
    - "bandit -r ."

package-app:
  stage: üì¶ package
  script:
    - "python setup.py sdist bdist_wheel"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month

publish-app-stage:
  stage: üöö publish
  script:
    - "python -m twine upload --repository-url https://test.pypi.org/legacy/ --username $PYPI_TEST_USERNAME --password $PYPI_TEST_PASSWORD --disable-progress-bar --verbose dist/*"
  only:
    - master

publish-app-prod:
  stage: üöö publish
  script:
    - "python -m twine upload --username $PYPI_USERNAME --password $PYPI_PASSWORD --disable-progress-bar --verbose dist/*"
  only:
    - tags

build-stage:
  stage: üê≥ build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - 'cp $DOT_ENV provisioning/docker/.env'
    - 'cp $DOT_FLASKENV provisioning/docker/.flaskenv'
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:latest'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:latest'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - master

build-prod:
  stage: üê≥ build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - 'cp $DOT_ENV provisioning/docker/.env'
    - 'cp $DOT_FLASKENV provisioning/docker/.flaskenv'
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:$CI_COMMIT_TAG'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:$CI_COMMIT_TAG'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - tags

sentry-stage:
  stage: üöÄ release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  script:
    - "sentry-cli releases new --finalize $(cat APP_RELEASE.txt)"
    - "sentry-cli releases deploys $(cat APP_RELEASE.txt) new -e staging"
  only:
    - master

sentry-prod:
  stage: üöÄ release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  script:
    - "sentry-cli releases new --finalize $(cat APP_RELEASE.txt)"
    - "sentry-cli releases deploys $(cat APP_RELEASE.txt) new -e production"
  only:
    - tags
