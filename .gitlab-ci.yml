---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/MAGIC/web-map-inventory/-/settings/ci_cd

# = Secret variables
#   Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Where a variable should be protected (only accessible to the master branch, tags, its name is appended with
#     '(protected)' (e.g. FOO (protected)`
#   Where a variable is a file, it's name is appended with '(file)' and the value refers to the file that should be
#     used as it's contents (e.g. FOO (file): "[contents of ./bar]"
#   Sensitive values are represented by "[Sensitive]"
#
# - App
# > DOT_ENV (protected, file): "[contents of .env]"
# > DOT_FLASKENV (protected, file): "[contents of .flaskenv]"
#
# - PyPi (production) - create tokens at https://pypi.org/manage/account/
# > PYPI_TOKEN (protected): "[Sensitive]"
#
# - PyPi (staging) - create tokens at https://test.pypi.org/manage/account/
# > PYPI_TEST_TOKEN (protected): "[Sensitive]"
#
# - Sentry
# > SENTRY_AUTH_TOKEN: "[Sensetive]"
# > SENTRY_DSN: "[Sensetive]"
#
# - Ansible
# > SSH_PRIVATE_KEY (protected, file): "[contents of BAS MAGIC Shared Deployment Identity private key]"

# == Global settings ==

stages:
  - 🧪 test
  - 🚚 publish
  - 🐳 build
  - 🚀 release

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: /certs/client
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_VERIFY: 1
  GITLAB_REGISTRY: docker-registry.data.bas.ac.uk
  APP_NAME: magic-map-layers-airflow
  APP_PACKAGE: bas-web-map-inventory
  APP_MODULE: bas_web_map_inventory
  SENTRY_ORG: antarctica
  SENTRY_PROJECT: web-map-inventory

image:
  name: docker-registry.data.bas.ac.uk/magic/web-map-inventory:latest
  entrypoint: [""]

# == Jobs ==

test-app:
  stage: 🧪 test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest -o junit_family=xunit2 --junitxml=test-results.xml --random-order"
  artifacts:
    reports:
      junit: test-results.xml

coverage-app:
  stage: 🧪 test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest --cov=bas_web_map_inventory --cov-fail-under=100 ."
    - "coverage html"
  artifacts:
    name: "$CI_BUILD_TOKEN-coverage"
    paths:
      - htmlcov
    expire_in: 1 month

typehints-app:
  stage: 🧪 test
  script:
    - "mypy --junit-xml typehint-results.xml bas_web_map_inventory/"
  artifacts:
    reports:
      junit: typehint-results.xml

pep8-app:
  stage: 🧪 test
  script:
    - "black --check bas_web_map_inventory/"

bandit-app:
  stage: 🧪 test
  script:
    - "bandit -r ."

publish-app-stage:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi-testing $PYPI_TEST_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi-testing --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - master

publish-app-prod:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi $PYPI_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - tags

build-stage:
  stage: 🐳 build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - 'cp $DOT_ENV provisioning/docker/.env'
    - 'cp $DOT_FLASKENV provisioning/docker/.flaskenv'
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - 'export PACKAGE_VERSION=$APP_PACKAGE==$VERSION'
    - 'cp dist/*.whl provisioning/docker/'
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:latest --build-arg PACKAGE_VERSION=$PACKAGE_VERSION'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:latest'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - master

build-prod:
  stage: 🐳 build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - 'cp $DOT_ENV provisioning/docker/.env'
    - 'cp $DOT_FLASKENV provisioning/docker/.flaskenv'
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - 'export PACKAGE_VERSION=$APP_PACKAGE==$VERSION'
    - 'cp dist/*.whl provisioning/docker/'
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:stable -t $CI_REGISTRY_IMAGE/deploy:$VERSION --build-arg PACKAGE_VERSION=$PACKAGE_VERSION'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:stable'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:$VERSION'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - tags

#deploy-stage:
#  stage: 🚀 release
#  image:
#    name: williamyeh/ansible:alpine3
#    entrypoint: [""]
#  before_script:
#    - 'apk update && apk add python3 git'
#    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
#    - "mkdir -p /root/.ssh"
#    - "mv $SSH_PRIVATE_KEY ~/.ssh/id_rsa"
#    - "chmod 400 ~/.ssh/id_rsa"
#    - "mkdir -p provisioning/ansible/files"
#    - "cp dist/*.whl provisioning/ansible/files/"
#    - "mv provisioning/ansible/ansible.cfg /etc/ansible/ansible.cfg"
#    - "mv provisioning/ansible/inventory.yml /etc/ansible/hosts"
#  script:
#    - "cd provisioning/ansible"
#    - "ansible-playbook --user geoweb deploy.yml --extra-vars \"target=staging module_name=$APP_MODULE package_name=$APP_PACKAGE package_version=$VERSION\""
#  only:
#    - master
#  environment:
#    name: Staging

#deploy-prod:
#  stage: 🚀 release
#  image:
#    name: williamyeh/ansible:alpine3
#    entrypoint: [""]
#  before_script:
#    - 'apk update && apk add python3 git'
#    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
#    - "mkdir -p /root/.ssh"
#    - "mv $SSH_PRIVATE_KEY ~/.ssh/id_rsa"
#    - "chmod 400 ~/.ssh/id_rsa"
#    - "mv provisioning/ansible/ansible.cfg /etc/ansible/ansible.cfg"
#    - "mv provisioning/ansible/inventory.yml /etc/ansible/hosts"
#  script:
#    - "cd provisioning/ansible"
#    - "ansible-playbook --user geoweb deploy.yml --extra-vars \"target=production package_name=$APP_PACKAGE package_version=$VERSION\""
#  only:
#    - tags
#  when: manual
#  environment:
#    name: Production

sentry-stage:
  stage: 🚀 release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  before_script:
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
  script:
    - "sentry-cli releases new --finalize $VERSION"
    - "sentry-cli releases deploys $VERSION new -e staging"
  only:
    - master

sentry-prod:
  stage: 🚀 release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  before_script:
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
  script:
    - "sentry-cli releases new --finalize $VERSION"
    - "sentry-cli releases deploys $VERSION new -e production"
  only:
    - tags
