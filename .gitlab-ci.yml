---

# == Notes ==

# - GitLab automatically passes artifacts from previous stages by default
# - Set required secret variables at: https://gitlab.data.bas.ac.uk/MAGIC/web-map-inventory/-/settings/ci_cd

# = Secret variables
#   Variables are grouped by section in KEY: "value" format (e.g. FOO: "bar")
#   Where a variable should be protected (only accessible to the master branch, tags, its name is appended with
#     '(protected)' (e.g. FOO (protected)`
#   Where a variable is a file, it's name is appended with '(file)' and the value refers to the file that should be
#     used as it's contents (e.g. FOO (file): "[contents of ./bar]"
#   Sensitive values are represented by "[Sensitive]"
#
# - App
# > DOT_ENV (protected, file): "[contents of .env]"
# > DOT_FLASKENV (protected, file): "[contents of .flaskenv]"
#
# - PyPi (production) - create tokens at https://pypi.org/manage/account/
# > PYPI_TOKEN (protected): "[Sensitive]"
#
# - PyPi (staging) - create tokens at https://test.pypi.org/manage/account/
# > PYPI_TEST_TOKEN (protected): "[Sensitive]"
#
# - AWS IAM id/secret keys for 'bas-gitlab-ci-bas-web-map-inventory' user
# > AWS_ACCESS_KEY_ID: "[Sensitive]"
# > AWS_SECRET_ACCESS_KEY: "[Sensitive]"
#
# - Sentry - create tokens at https://sentry.io/settings/antarctica/developer-settings/bas-gitlab-4ffa11/
# > SENTRY_AUTH_TOKEN: "[Sensitive]"
#
# - Deployment
# > SSH_PRIVATE_KEY (protected, file): "[contents of BAS MAGIC Shared Deployment Identity private key]"
#
# - GitLab - create token as the 'bot_magic_ci' user
# > GITLAB_ACCESS_TOKEN: "[Sensitive]"

# == Global settings ==

stages:
  - 🧪 test
  - 🚚 publish
  - 🏗 build
  - 🚀 release

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_CERT_PATH: /certs/client
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_VERIFY: 1
  GITLAB_REGISTRY: docker-registry.data.bas.ac.uk
  APP_NAME: magic-map-layers-airflow
  APP_PACKAGE: bas-web-map-inventory
  SENTRY_ORG: antarctica
  SENTRY_PROJECT: web-map-inventory
  DEPLOY_USER: geoweb
  DEPLOY_HOST: bslws01.nerc-bas.ac.uk
  S3_SCHEMA_BUCKET_PROD: metadata-standards.data.bas.ac.uk

image:
  name: docker-registry.data.bas.ac.uk/magic/web-map-inventory:latest
  entrypoint: [""]

# == Jobs ==

test-app:
  stage: 🧪 test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest -o junit_family=xunit2 --junitxml=test-results.xml --random-order"
  artifacts:
    reports:
      junit: test-results.xml

coverage-app:
  stage: 🧪 test
  variables:
    FLASK_ENV: testing
  before_script:
    - "touch .env"
    - "mkdir -p /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
    - "cp -a --no-preserve=mode,ownership bas_web_map_inventory/resources/xml_schemas/*.xsd /usr/src/app/bas_web_map_inventory/resources/xml_schemas/"
  script:
    - "pytest --cov=bas_web_map_inventory --cov-fail-under=100 ."
    - "coverage html"
  artifacts:
    name: "$CI_BUILD_TOKEN-coverage"
    paths:
      - htmlcov
    expire_in: 1 month

pep8-app:
  stage: 🧪 test
  script:
    - "black --check bas_web_map_inventory/"

bandit-app:
  stage: 🧪 test
  script:
    - "bandit -r ."

publish-app-stage:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi-testing $PYPI_TEST_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi-testing --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - master

publish-app-prod:
  stage: 🚚 publish
  before_script:
    - "poetry config pypi-token.pypi $PYPI_TOKEN --local"
    - "python support/python-packaging/parse_version.py $(git describe --tags) --pyproject"
  script:
    - "poetry publish --build --repository pypi --no-interaction"
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 month
  only:
    - tags

publish-schemas-prod:
  stage: 🚚 publish
  image:
    name: governmentpaas/awscli:latest
    entrypoint: [""]
  before_script:
    - "mkdir schemas-dist"
    - "cp bas_web_map_inventory/resources/json_schemas/data-resources-schema.json schemas-dist/data-resources-schema-v1.json"
    - "cp bas_web_map_inventory/resources/json_schemas/data-resources-schema.json schemas-dist/data-sources-schema-v1.json"
  script:
    - "aws s3 sync --delete bas_web_map_inventory/resources/json_schemas/ s3://$S3_SCHEMA_BUCKET_PROD/bas-web-map-inventory-configuration-schemas/"
  only:
    - tags

build-dev:
  stage: 🏗 build
  script:
    - 'poetry build'
  artifacts:
    name: "$CI_BUILD_TOKEN-build"
    paths:
      - dist
    expire_in: 1 week
  except:
    - master
    - tags

build-stage:
  stage: 🏗 build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - "apk update && apk add python3 git"
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - "export PACKAGE_VERSION=$APP_PACKAGE==$VERSION"
    - "cp $DOT_ENV provisioning/docker/.env"
    - "cp $DOT_FLASKENV provisioning/docker/.flaskenv"
    - "mkdir -p provisioning/docker/wheelhouse"
    - "cp dist/*.whl provisioning/docker/wheelhouse"
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:latest --build-arg PACKAGE_VERSION=$PACKAGE_VERSION'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:latest'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - master

build-prod:
  stage: 🏗 build
  image:
    name: docker:19.03-dind
    entrypoint: [""]
  before_script:
    - "apk update && apk add python3 git"
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - "export PACKAGE_VERSION=$APP_PACKAGE==$VERSION"
    - "cp $DOT_ENV provisioning/docker/.env"
    - "cp $DOT_FLASKENV provisioning/docker/.flaskenv"
    - "mkdir -p provisioning/docker/wheelhouse"
    - "cp dist/*.whl provisioning/docker/wheelhouse"
  script:
    - 'cd provisioning/docker'
    - 'echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin'
    - 'docker build . -t $CI_REGISTRY_IMAGE/deploy:stable -t $CI_REGISTRY_IMAGE/deploy:$VERSION --build-arg PACKAGE_VERSION=$PACKAGE_VERSION'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:stable'
    - 'docker push $CI_REGISTRY_IMAGE/deploy:$VERSION'
  services:
    - docker:dind
  tags:
    - dnd
  only:
    - tags

release-stage:
    stage: 🚀 release
    image:
      name: alpine:latest
      entrypoint: [""]
    before_script:
      - 'apk update && apk add openssh-client'
      - "mkdir -p /root/.ssh"
      - "mv $SSH_PRIVATE_KEY ~/.ssh/id_rsa"
      - "chmod 400 ~/.ssh/id_rsa"
      - "ssh-keyscan $DEPLOY_HOST > ~/.ssh/known_hosts"
    script:
      - "ssh $DEPLOY_USER@$DEPLOY_HOST podman pull $CI_REGISTRY_IMAGE/deploy:latest"
    only:
     - master
    environment:
      name: Staging

release-prod:
  stage: 🚀 release
  image:
    name: alpine:latest
    entrypoint: [""]
  before_script:
    - 'apk update && apk add openssh-client'
    - "mkdir -p /root/.ssh"
    - "mv $SSH_PRIVATE_KEY ~/.ssh/id_rsa"
    - "chmod 400 ~/.ssh/id_rsa"
    - "ssh-keyscan $DEPLOY_HOST > ~/.ssh/known_hosts"
  script:
    - "ssh $DEPLOY_USER@$DEPLOY_HOST podman pull $CI_REGISTRY_IMAGE/deploy:stable"
  only:
   - tags
  environment:
    name: Production

sentry-stage:
  stage: 🚀 release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  before_script:
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - "export SENTRY_VERSION=$SENTRY_PROJECT@$VERSION"
  script:
    - "sentry-cli releases new --finalize $SENTRY_VERSION"
    - "sentry-cli releases deploys $SENTRY_VERSION new -e staging"
    - "sentry-cli releases set-commits --auto $SENTRY_VERSION"
  only:
    - master

sentry-prod:
  stage: 🚀 release
  image:
    name: getsentry/sentry-cli
    entrypoint: [""]
  before_script:
    - 'apk update && apk add python3 git'
    - "python3 support/python-packaging/parse_version.py $(git describe --tags) > _version && export VERSION=$(cat _version)"
    - "export SENTRY_VERSION=$SENTRY_PROJECT@$VERSION"
  script:
    - "sentry-cli releases new --finalize $SENTRY_VERSION"
    - "sentry-cli releases deploys $SENTRY_VERSION new -e production"
    - "sentry-cli releases set-commits --auto $SENTRY_VERSION"
  only:
    - tags

gitlab-prod:
  stage: 🚀 release
  image:
    name: byrnedo/alpine-curl:0.1.8
    entrypoint: [""]
  script:
    - curl --request POST
      --header 'Content-Type:application/json'
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data '{"name":"'$CI_COMMIT_TAG'","tag_name":"'$CI_COMMIT_TAG'","description":"...","milestones":["'$CI_COMMIT_TAG'"]}'
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases"
    - curl --request POST
      --header "PRIVATE-TOKEN:$GITLAB_ACCESS_TOKEN"
      --data name="PyPi package"
      --data url="https://pypi.org/project/$APP_PACKAGE/${CI_COMMIT_TAG:1}"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"
  only:
    - tags
